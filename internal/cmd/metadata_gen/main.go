package main

import (
	"log"
	"os"
	"text/template"

	"github.com/Masterminds/sprig"
	"github.com/Xuanwo/storage/types"
)

func main() {
	const filePath = "metadata.go"

	f, err := os.Create(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = tmpl.Execute(f, struct {
		Data map[string]string
	}{
		types.AvailablePairs,
	})
	if err != nil {
		log.Fatal(err)
	}
}

var tmpl = template.Must(template.New("").Funcs(sprig.HermeticTxtFuncMap()).Parse(`// Code generated by go generate internal/cmd/metdata_gen; DO NOT EDIT.
package types

{{- range $k, $v := .Data }}
// Get{{ $k | camelcase }} will get {{ $k }} value from metadata.
func (m Metadata) Get{{ $k | camelcase }}() ({{ $v }}, bool)  {
	v, ok := m[{{ $k | camelcase }}]
	if !ok {
		return {{ if eq $v "int64" }}0{{ else if eq $v "int" }}0{{ else if eq $v "string" }}""{{ else if eq $v "bool" }}false{{end}}, false
	}
	return v.({{ $v }}), true
}

// Set{{ $k | camelcase }} will set {{ $k }} value into metadata.
func (m Metadata) Set{{ $k | camelcase }}(v {{ $v }})  {
	m[{{ $k | camelcase }}] = v
}
{{- end }}
`))
